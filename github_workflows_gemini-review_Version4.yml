name: Gemini AI Review (High-level, secure auth)

# High-level: Use OIDC/Workload Identity for Vertex AI (recommended), or fallback to a secret-based API key for proxy endpoints.
# Modes:
#   - gcloud  : Use google-github-actions/auth to mint a short-lived token for Vertex AI (no static keys in repo)
#   - secret  : Use a repository secret GEMINI_API_KEY (for internal proxies that require a static key)
#
# Required secrets (depending on mode):
#   - For gcloud mode:
#       GCP_WORKLOAD_IDENTITY_PROVIDER  (e.g. "projects/PROJECT_NUMBER/locations/global/workloadIdentityPools/POOL/providers/PROVIDER")
#       GCP_SERVICE_ACCOUNT_EMAIL       (service account email to impersonate)
#   - For secret mode:
#       GEMINI_API_KEY
#   - Both modes:
#       GEMINI_API_ENDPOINT             (the model endpoint / proxy URL) -- store in secrets
#
# Set a secret GEMINI_AUTH_MODE to "gcloud" or "secret" (default: secret).

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read
  id-token: write        # required for OIDC -> GCP authentication
  pull-requests: write   # only used if POST_BACK=true (controlled via secret)

env:
  GEMINI_MODEL: "gemini-pro-2.5"
  GEMINI_AUTH_MODE: ${{ secrets.GEMINI_AUTH_MODE || 'secret' }}  # 'gcloud' or 'secret'
  GEMINI_API_ENDPOINT: ${{ secrets.GEMINI_API_ENDPOINT }}

jobs:
  gemini-review:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout repository (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js 18.x
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: (gcloud) Authenticate to GCP with Workload Identity (if requested)
        if: env.GEMINI_AUTH_MODE == 'gcloud'
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      - name: (gcloud) Install gcloud SDK and obtain access token
        if: env.GEMINI_AUTH_MODE == 'gcloud'
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID || '' }}  # optional
        run: |
          # print-access-token will use the identity from the auth step above
          TOKEN=$(gcloud auth print-access-token)
          if [ -z "$TOKEN" ]; then
            echo "Failed to obtain access token from gcloud" >&2
            exit 2
          fi
          # export the short-lived token for the script; do NOT echo token to logs
          echo "GEMINI_ACCESS_TOKEN=$TOKEN" >> $GITHUB_ENV

      - name: Ensure review script is present and executable
        run: |
          if [ ! -f ./scripts/ai-review/gemini-review.js ]; then
            echo "Missing scripts/ai-review/gemini-review.js" >&2
            exit 2
          fi
          chmod +x ./scripts/ai-review/gemini-review.js

      - name: Run Gemini Pro 2.5 review (secure)
        id: run_review
        env:
          GEMINI_MODEL: ${{ env.GEMINI_MODEL }}
          GEMINI_AUTH_MODE: ${{ env.GEMINI_AUTH_MODE }}
          GEMINI_API_ENDPOINT: ${{ env.GEMINI_API_ENDPOINT }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}          # used only in secret mode
          GEMINI_ACCESS_TOKEN: ${{ env.GEMINI_ACCESS_TOKEN }}   # set only in gcloud mode (via gcloud)
          REVIEWERS: "Gemini Pro 2.5 (high-level)"
          STANDARDS: "vault"
          POST_BACK: ${{ secrets.GEMINI_POST_BACK || 'false' }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CI_COMMIT_SHA: ${{ github.sha }}
          CI_PR_NUMBER: ${{ github.event.pull_request.number || '' }}
        run: |
          node ./scripts/ai-review/gemini-review.js

      - name: Upload review artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gemini-review-output
          path: ./artifacts/gemini-review-*.json